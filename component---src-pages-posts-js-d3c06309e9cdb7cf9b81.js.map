{"version":3,"sources":["webpack:///./src/pages/posts.js","webpack:///./src/components/post-list-section.js"],"names":["PostsPage","data","years","posts","edges","map","node","frontmatter","year","uniqueYears","Set","postsInYear","forEach","filter","title","key","SectionWrapper","styled","section","SectionTitle","h2","PostListItem","div","PostDate","PostTitle","PostListSection","count","length","titleWithCount","formattedDate","moment","date","local","format","id","to","fields","slug","defaultProps"],"mappings":"0lBAgDeA,UA1CG,WAChB,IAAMC,EAAI,OAsBJC,EAAQD,EAAKE,MAAMC,MAAMC,KAAI,qBAAGC,KAAgBC,YAAYC,QAC5DC,EAAW,EAAO,IAAIC,IAAIR,IAC1BS,EAAc,GAOpB,OANAF,EAAYG,SAAQ,SAAAJ,GAClBG,EAAYH,GAAQP,EAAKE,MAAMC,MAAMS,QACnC,qBAAGP,KAAgBC,YAAYC,OAASA,QAK1C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKM,MAAM,UACVL,EAAYJ,KAAI,SAAAG,GAAI,OACnB,kBAAC,IAAD,CAAiBO,IAAKP,EAAMM,MAAON,EAAML,MAAOQ,EAAYH,W,kCC1CpE,sEAMMQ,EAAiBC,IAAOC,QAAV,wFAAGD,CAAH,qEASdE,EAAeF,IAAOG,GAAV,sFAAGH,CAAH,yFAWZI,EAAeJ,IAAOK,IAAV,sFAAGL,CAAH,gCAKZM,EAAWN,IAAOK,IAAV,kFAAGL,CAAH,iLAYRO,EAAYP,IAAOK,IAAV,mFAAGL,CAAH,gGAWTQ,EAAkB,SAAC,GAAsB,IAApBX,EAAmB,EAAnBA,MAAOX,EAAY,EAAZA,MAC1BuB,EAAQvB,EAAMwB,OACdC,EAAoBd,EAAN,MAAiBY,EAAjB,SAAwC,IAAVA,EAAc,GAAK,KACrE,OACE,kBAACV,EAAD,KACE,kBAACG,EAAD,KAAeS,GACdzB,EAAME,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNuB,EAAgBC,IAAOxB,EAAKC,YAAYwB,MAC3CC,QACAC,OAFmB,SAGtB,OACE,kBAACZ,EAAD,CAAcN,IAAKT,EAAK4B,IACtB,kBAACX,EAAD,KAAWM,GACX,kBAACL,EAAD,KACE,kBAAC,OAAD,CAAMW,GAAI7B,EAAK8B,OAAOC,MAAO/B,EAAKC,YAAYO,cA2B5DW,EAAgBa,aAAe,CAC7BxB,MAAM,GACNX,MAAO,IAGMsB,O","file":"component---src-pages-posts-js-d3c06309e9cdb7cf9b81.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostListSection from \"../components/post-list-section\"\n\nconst PostsPage = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      posts: allMarkdownRemark(\n        filter: {frontmatter: {layout: {ne: \"draft\"}}}\n        sort: { order: DESC, fields: frontmatter___date }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date\n              year: date(formatString: \"YYYY\")\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `)\n  const years = data.posts.edges.map(({ node }) => node.frontmatter.year)\n  const uniqueYears = [...new Set(years)]\n  const postsInYear = {}\n  uniqueYears.forEach(year => {\n    postsInYear[year] = data.posts.edges.filter(\n      ({ node }) => node.frontmatter.year === year\n    )\n  })\n\n  return (\n    <Layout>\n      <SEO title=\"Posts\" />\n      {uniqueYears.map(year => (\n        <PostListSection key={year} title={year} posts={postsInYear[year]} />\n      ))}\n    </Layout>\n  )\n}\n\nexport default PostsPage\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport moment from \"moment\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\n\nconst SectionWrapper = styled.section`\n  margin: 0 0 1.5rem 0;\n  padding: 0;\n\n  &:last-child {\n    margin-bottom: 1rem;\n  }\n`\n\nconst SectionTitle = styled.h2`\n  margin: 0;\n  padding: 0 0 1rem 0;\n\n  & span {\n    font-weight: lighter;\n    color: red;\n    font-size: 0.8rem;\n  }\n`\n\nconst PostListItem = styled.div`\n  margin: 0;\n  padding: 0.1rem 0;\n`\n\nconst PostDate = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  padding: 0.1rem 1.5rem;\n  background-color: #ffcc06;\n  border-radius: 0.2rem;\n  color: white;\n  font-family: monospace;\n  font-weight: bold;\n`\n\nconst PostTitle = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  padding: 0 0 0 0.5rem;\n\n  & a {\n    color: black;\n  }\n`\n\nconst PostListSection = ({ title, posts }) => {\n  const count = posts.length\n  const titleWithCount = `${title} / ${count} post${count === 1 ? \"\" : \"s\"}`\n  return (\n    <SectionWrapper>\n      <SectionTitle>{titleWithCount}</SectionTitle>\n      {posts.map(({ node }) => {\n        const formattedDate = moment(node.frontmatter.date)\n          .local()\n          .format(`MM/DD`)\n        return (\n          <PostListItem key={node.id}>\n            <PostDate>{formattedDate}</PostDate>\n            <PostTitle>\n              <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n            </PostTitle>\n          </PostListItem>\n        )\n      })}\n    </SectionWrapper>\n  )\n}\n\nPostListSection.propTypes = {\n  title: PropTypes.string,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        frontmatter: PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          date: PropTypes.string.isRequired,\n        }),\n        fields: PropTypes.shape({\n          slug: PropTypes.string.isRequired,\n        }),\n      }),\n    }).isRequired\n  ),\n}\n\nPostListSection.defaultProps = {\n  title: ``,\n  posts: [],\n}\n\nexport default PostListSection\n"],"sourceRoot":""}