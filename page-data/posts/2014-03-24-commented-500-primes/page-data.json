{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2014-03-24-commented-500-primes/","webpackCompilationHash":"bc6536c6fbb9ea9bdc57","result":{"data":{"currentPost":{"html":"<h3>Source Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token operator\">%</span> Algorithm P: Print table of <span class=\"token number\">500</span> primes\nL       IS      <span class=\"token number\">500</span>                 <span class=\"token operator\">%</span> The number of primes to find\nt       IS      <span class=\"token number\">$255</span>                <span class=\"token operator\">%</span> Temporary storage\nn       GREG    <span class=\"token number\">0</span>                   <span class=\"token operator\">%</span> Prime candidate\nq       GREG    <span class=\"token number\">0</span>                   <span class=\"token operator\">%</span> Quotient\nr       GREG    <span class=\"token number\">0</span>                   <span class=\"token operator\">%</span> Remainder\njj      GREG    <span class=\"token number\">0</span>                   <span class=\"token operator\">%</span> Index for PRIME<span class=\"token operator\">[</span>j<span class=\"token operator\">]</span>\nkk      GREG    <span class=\"token number\">0</span>                   <span class=\"token operator\">%</span> Index for PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>\npk      GREG    <span class=\"token number\">0</span>                   <span class=\"token operator\">%</span> Value of PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>\nmm      IS      kk                  <span class=\"token operator\">%</span> Index for output lines\n        LOC     Data_Segment\nPRIME1  WYDE    <span class=\"token number\">2</span>                   <span class=\"token operator\">%</span> PRIME<span class=\"token operator\">[</span><span class=\"token number\">1</span><span class=\"token operator\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n        LOC     PRIME1<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>L\nptop    GREG    @                   <span class=\"token operator\">%</span> Address of PRIME<span class=\"token operator\">[</span><span class=\"token number\">501</span><span class=\"token operator\">]</span>\nj0      GREG    PRIME1<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">-</span>@          <span class=\"token operator\">%</span> Initial value of jj\nBUF     OCTA    <span class=\"token number\">0</span>                   <span class=\"token operator\">%</span> Place to form decimal string\n\n        LOC     #<span class=\"token number\">100</span>\nMain    SET     n,<span class=\"token number\">3</span>                 <span class=\"token operator\">%</span> P1. Start table. n <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token number\">3</span>\n        SET     jj,j0               <span class=\"token operator\">%</span> j <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n2H      STWU    n,ptop,jj           <span class=\"token operator\">%</span> P2. n is prime. PRIME<span class=\"token operator\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> n\n        INCL    jj,<span class=\"token number\">2</span>                <span class=\"token operator\">%</span> j <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n3H      BZ      jj,2F               <span class=\"token operator\">%</span> P3. <span class=\"token number\">500</span> found?\n4H      INCL    n,<span class=\"token number\">2</span>                 <span class=\"token operator\">%</span> P4. Advance n\n5H      SET     kk,j0               <span class=\"token operator\">%</span> P5. k <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> k <span class=\"token operator\">=</span> ptop <span class=\"token operator\">-</span> kk\n6H      LDWU    pk,ptop,kk          <span class=\"token operator\">%</span> P6. n <span class=\"token operator\">/</span> PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span> ?\n        DIV     q,n,pk              <span class=\"token operator\">%</span> q <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> floor(n <span class=\"token operator\">/</span> PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>)\n        GET     r,rR                <span class=\"token operator\">%</span> r <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> n mod PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>\n        BZ      r,4B                <span class=\"token operator\">%</span> To P4 if r <span class=\"token operator\">=</span> <span class=\"token number\">0</span> for checking the next n\n7H      CMP     t,q,pk              <span class=\"token operator\">%</span> P7. PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span> large?\n        BNP     t,2B                <span class=\"token operator\">%</span> To P4 if q <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span> PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>\n8H      INCL    kk,<span class=\"token number\">2</span>                <span class=\"token operator\">%</span> P8. Advance k. k <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        JMP     6B                  <span class=\"token operator\">%</span> To P6.\n        GREG    @                   <span class=\"token operator\">%</span> Base address\nTitle   BYTE    <span class=\"token string\">\"First Five Hundred Primes\"</span>\nNewLn   BYTE    #a,<span class=\"token number\">0</span>\nBlanks  BYTE    <span class=\"token string\">\"   \"</span>,<span class=\"token number\">0</span>             <span class=\"token operator\">%</span> String of three blanks\n2H      LDA     t,Title             <span class=\"token operator\">%</span> P9. Print Title\n        TRAP    <span class=\"token number\">0</span>,Fputs,StdOut\n        NEG     mm,<span class=\"token number\">2</span>\n3H      ADD     mm,mm,j0            <span class=\"token operator\">%</span> P10. Print line\n        LDA     t,Blanks            <span class=\"token operator\">%</span> Output <span class=\"token string\">\"   \"</span>.\n        TRAP    <span class=\"token number\">0</span>,Fputs,StdOut\n2H      LDWU    pk,ptop,mm          <span class=\"token operator\">%</span> pk <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> prime to be printed\n0H      GREG    #<span class=\"token number\">2030303030000000</span>   <span class=\"token operator\">%</span> <span class=\"token string\">\" 0000\"</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0</span>\n        STOU    <span class=\"token number\">0B</span>,BUF              <span class=\"token operator\">%</span> Prepare buffer for decimal conversion\n        LDA     t,BUF<span class=\"token operator\">+</span><span class=\"token number\">4</span>             <span class=\"token operator\">%</span> t <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> position of units digit\n1H      DIV     pk,pk,<span class=\"token number\">10</span>            <span class=\"token operator\">%</span> pk <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> floor(pk<span class=\"token operator\">/</span><span class=\"token number\">10</span>)\n        GET     r,rR                <span class=\"token operator\">%</span> r <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> next digit\n        INCL    r,<span class=\"token string\">'0'</span>               <span class=\"token operator\">%</span> r <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> ASCII digit r\n        STBU    r,t,<span class=\"token number\">0</span>               <span class=\"token operator\">%</span> Store r in the buffer\n        SUB     t,t,<span class=\"token number\">1</span>               <span class=\"token operator\">%</span> Move one byte to the left\n        PBNZ    pk,<span class=\"token number\">1B</span>               <span class=\"token operator\">%</span> Repeat on remaining digits\n        LDA     t,BUF               <span class=\"token operator\">%</span> Output <span class=\"token string\">\" \"</span> and four digits\n        TRAP    <span class=\"token number\">0</span>,Fputs,StdOut\n        INCL    mm,<span class=\"token number\">2</span><span class=\"token operator\">*</span>L<span class=\"token operator\">/</span><span class=\"token number\">10</span>           <span class=\"token operator\">%</span> Advance by <span class=\"token number\">50</span> wydes\n        PBN     mm,2B\n        LDA     t,NewLn             <span class=\"token operator\">%</span> Output a newline\n        TRAP    <span class=\"token number\">0</span>,Fputs,StdOut\n        CMP     t,mm,<span class=\"token number\">2</span><span class=\"token operator\">*</span>(L<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>)     <span class=\"token operator\">%</span> P11. <span class=\"token number\">500</span> printed?\n        PBNZ    t,3B                <span class=\"token operator\">%</span> To P10 if not done\n        TRAP    <span class=\"token number\">0</span>,Halt,<span class=\"token number\">0</span></code></pre></div>\n<h3>시작에 앞서armasm</h3>\n<p>코드의 각 필드는 다음을 의미한다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">line number</th>\n<th align=\"left\">LABEL</th>\n<th align=\"left\">OP</th>\n<th align=\"left\">EXPR</th>\n<th align=\"left\">Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">02</td>\n<td align=\"left\">L</td>\n<td align=\"left\">IS</td>\n<td align=\"left\">500</td>\n<td align=\"left\">% The number of primes to find</td>\n</tr>\n</tbody>\n</table>\n<h4>Line 01</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">01</span> <span class=\"token operator\">%</span> Algorithm P: Print table of <span class=\"token number\">500</span> primes</code></pre></div>\n<p>%로 시작하는 01은 주석으로 어셈블리 코드에 영향을 주지 않는다.</p>\n<h3>전역 레지스터 선언과 초기화</h3>\n<h4>Line 02 ~ 03</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">02</span> L       IS      <span class=\"token number\">500</span>             <span class=\"token operator\">%</span> The number of primes to find\n<span class=\"token number\">03</span> t       IS      <span class=\"token number\">$255</span>            <span class=\"token operator\">%</span> Temporary storage</code></pre></div>\n<blockquote>\n<p>..., the pseudo-operation <code class=\"language-text\">IS</code> sets the equivalent of a symbol.</p>\n</blockquote>\n<p>Pseudo-operation <code class=\"language-text\">IS</code>는 심볼의 값을 설정한다.</p>\n<p>02에서 <code class=\"language-text\">L</code>은 500으로 설정된다. 이 값은 우리가 찾을 소수의 갯수이다.\n03에서 <code class=\"language-text\">t</code>의 값은 $255 레지스터이다.</p>\n<p>심볼들은 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mtext> </mtext></mrow><annotation encoding=\"application/x-tex\">0 ~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace nobreak\"> </span></span></span></span>255 범위의 레지스터 값을 갖거나, 8바이트의 숫자값을 가질 수 있다.</p>\n<p>일반적으로 레지스터를 나타내는 심볼은 소문자로 시작하고, 순수한 값을 나태내는 심볼은 대문자를 사용한다.</p>\n<h4>Line 04 ~ 09</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">04</span> n       GREG    <span class=\"token number\">0</span>               <span class=\"token operator\">%</span> Prime candidate\n<span class=\"token number\">05</span> q       GREG    <span class=\"token number\">0</span>               <span class=\"token operator\">%</span> Quotient\n<span class=\"token number\">06</span> r       GREG    <span class=\"token number\">0</span>               <span class=\"token operator\">%</span> Remainder\n<span class=\"token number\">07</span> jj      GREG    <span class=\"token number\">0</span>               <span class=\"token operator\">%</span> Index for PRIME<span class=\"token operator\">[</span>j<span class=\"token operator\">]</span>\n<span class=\"token number\">08</span> kk      GREG    <span class=\"token number\">0</span>               <span class=\"token operator\">%</span> Index for PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>\n<span class=\"token number\">09</span> pk      GREG    <span class=\"token number\">0</span>               <span class=\"token operator\">%</span> Value of PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span></code></pre></div>\n<blockquote>\n<p>The pseudo-op <code class=\"language-text\">GREG</code> on line 04 allocates a global register.</p>\n</blockquote>\n<p>Pseudo-operation <code class=\"language-text\">GREG</code>는 전역 레지스터를 할당한다.</p>\n<p>$255 레지스터는 항상 전역 레지스터이다.</p>\n<p>04의 <code class=\"language-text\">GREG</code>는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>254</mn><mtext>를전역레지스터로만든다</mtext><mi mathvariant=\"normal\">.</mi><mn>05</mn><mtext>도마찬가지로</mtext></mrow><annotation encoding=\"application/x-tex\">254를 전역 레지스터로 만든다. 05도 마찬가지로</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord hangul_fallback\">를</span><span class=\"mord hangul_fallback\">전</span><span class=\"mord hangul_fallback\">역</span><span class=\"mord hangul_fallback\">레</span><span class=\"mord hangul_fallback\">지</span><span class=\"mord hangul_fallback\">스</span><span class=\"mord hangul_fallback\">터</span><span class=\"mord hangul_fallback\">로</span><span class=\"mord hangul_fallback\">만</span><span class=\"mord hangul_fallback\">든</span><span class=\"mord hangul_fallback\">다</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord hangul_fallback\">도</span><span class=\"mord hangul_fallback\">마</span><span class=\"mord hangul_fallback\">찬</span><span class=\"mord hangul_fallback\">가</span><span class=\"mord hangul_fallback\">지</span><span class=\"mord hangul_fallback\">로</span></span></span></span>253에 대해서 그러하다. 따라서 04에서 09까지 총 6개의 전역 레지스터가 할당된다. 그리고 n, q, r, jj, kk, pk는 각 레지스터와 동일하다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Symbol</th>\n<th align=\"center\">Global Register</th>\n<th align=\"center\">Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">n</td>\n<td align=\"center\">$254</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">q</td>\n<td align=\"center\">$253</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">r</td>\n<td align=\"center\">$252</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">jj</td>\n<td align=\"center\">$251</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">kk</td>\n<td align=\"center\">$250</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">pk</td>\n<td align=\"center\">$249</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">GREG</code> 정의의 EXPR 필드가  <strong>0</strong>이면, 해당 전역 레지스터는 프로그램이 실행될 때 동적으로 변하는 값을 갖는다고 가정한다.</p>\n<p>14, 15, 34, 45와 같이 0이 아닌 식이 주어지면, 해당 전역 레지스터는 프로그램이 실행되는 동안 상수값을 갖는다.</p>\n<h4>Line 10</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">10</span> mm      IS      kk              <span class=\"token operator\">%</span> Index for output lines</code></pre></div>\n<p>08줄에 따라 mm은 $250와 동일하다.</p>\n<h4>Line 11</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">11</span>         LOC     Data_Segment</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">Location LOC Expression</code> : Continue to assemble instructions or data at the position in memory given by Expression. Often used Expressions are: #100 (where programs start) or Data_Segment. -- MMIX Quick Reference Card \"Assembler Directives\"</p>\n</blockquote>\n<p>Pseudo-operation <code class=\"language-text\">LOC</code>는 <code class=\"language-text\">EXPR</code>에 의해 주어진 <strong>메모리의 위치</strong>에서 어셈블리 명령 또는 데이터가 계속됨을 의미한다.</p>\n<p>Data_Segment는 MMIXAL에서 편의상 #2000 0000 0000 0000 (보기 편의상 4자리 마다 공백 문자를 넣었음. 실제로는 붙여써야 함)로 미리 정의되어 있다.</p>\n<h4>Line 12</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">12</span> PRIME1  WYDE    <span class=\"token number\">2</span>               <span class=\"token operator\">%</span> PRIME<span class=\"token operator\">[</span><span class=\"token number\">1</span><span class=\"token operator\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span></code></pre></div>\n<p><code class=\"language-text\">WYDE</code>는 2바이트 메모리를 할당하고 <code class=\"language-text\">EXPR</code>의 결과로 로 초기화 한다. 그리고 <code class=\"language-text\">LABEL</code>은 할당된 주소의 이름이 된다. 그리하야 <code class=\"language-text\">Data_Segment</code> 영역에 소수를 저장할 공간의 시작 주소에 <code class=\"language-text\">PRIME1</code> 이라는 이름이 붙었고, 거기에 첫번째 소수인 2가 저장되었다.</p>\n<h4>Line 13 ~ Line 15</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">13</span>         LOC     PRIME1<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>L\n<span class=\"token number\">14</span> ptop    GREG    @               <span class=\"token operator\">%</span> Address of PRIME<span class=\"token operator\">[</span><span class=\"token number\">501</span><span class=\"token operator\">]</span>\n<span class=\"token number\">15</span> j0      GREG    PRIME1<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">-</span>@      <span class=\"token operator\">%</span> Initial value of jj</code></pre></div>\n<p>전역 레지스터 ptop에 PRIME1으로 부터 1000 bytes 떨어진 메모리의 주소를 저장한다.</p>\n<p>그리고 전역 레지스터 ptop, j0에 아래와 같은 값이 초기화 된다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Symbol</th>\n<th align=\"center\">Global Register</th>\n<th align=\"center\">Value</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">ptop</td>\n<td align=\"center\">$248</td>\n<td align=\"center\">#20000000000003e8</td>\n<td align=\"left\">PRIME1+1000</td>\n</tr>\n<tr>\n<td align=\"center\">j0</td>\n<td align=\"center\">$247</td>\n<td align=\"center\">-998</td>\n<td align=\"left\">PRIME1+2-(PRIME1+1000)</td>\n</tr>\n</tbody>\n</table>\n<h4>Line 16</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">16</span> BUF     OCTA    <span class=\"token number\">0</span>               <span class=\"token operator\">%</span> Place to form decimal string</code></pre></div>\n<p>이 후 결과 출력을 위해 십진수 숫자를 저장할 문자열 버퍼로 메모리에 8 byte를 할당하고 0으로 초기화 한다. 그리고 그 주소의 이름은 <code class=\"language-text\">BUF</code>.</p>\n<h3>소수 구하기</h3>\n<h4>Line 18</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">18</span>         LOC     #<span class=\"token number\">100</span></code></pre></div>\n<p>user space address #0000 0000 0000 0100에 아래 코드가 위치한다.</p>\n<h4>Line 19 ~ 20</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">19</span> Main    SET     n,<span class=\"token number\">3</span>             <span class=\"token operator\">%</span> P1. Start table. n <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token number\">3</span>\n<span class=\"token number\">20</span>         SET     jj,j0           <span class=\"token operator\">%</span> j <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token number\">1</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Symbol</th>\n<th align=\"center\">Global Register</th>\n<th align=\"center\">Previous Value</th>\n<th align=\"center\">Current Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">n</td>\n<td align=\"center\">$254</td>\n<td align=\"center\">0</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\">jj</td>\n<td align=\"center\">$251</td>\n<td align=\"center\">0</td>\n<td align=\"center\">-998</td>\n</tr>\n<tr>\n<td align=\"center\">j0</td>\n<td align=\"center\">$247</td>\n<td align=\"center\">-998</td>\n<td align=\"center\">-998</td>\n</tr>\n</tbody>\n</table>\n<h4>Line 21 ~ 33</h4>\n<p>소수를 찾는 루프 부분.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">21</span> 2H      STWU    n,ptop,jj       <span class=\"token operator\">%</span> P2. n is prime. PRIME<span class=\"token operator\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> n\n<span class=\"token number\">22</span>         INCL    jj,<span class=\"token number\">2</span>            <span class=\"token operator\">%</span> j <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token number\">23</span> 3H      BZ      jj,2F           <span class=\"token operator\">%</span> P3. <span class=\"token number\">500</span> found?\n<span class=\"token number\">24</span> 4H      INCL    n,<span class=\"token number\">2</span>             <span class=\"token operator\">%</span> P4. Advance n\n<span class=\"token number\">25</span> 5H      SET     kk,j0           <span class=\"token operator\">%</span> P5. k <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> k <span class=\"token operator\">=</span> ptop <span class=\"token operator\">+</span> kk\n<span class=\"token number\">26</span> 6H      LDWU    pk,ptop,kk      <span class=\"token operator\">%</span> P6. n <span class=\"token operator\">/</span> PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span> ?\n<span class=\"token number\">27</span>         DIV     q,n,pk          <span class=\"token operator\">%</span>       q <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> floor(n <span class=\"token operator\">/</span> PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>)\n<span class=\"token number\">28</span>         GET     r,rR            <span class=\"token operator\">%</span>       r <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> n mod PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>\n<span class=\"token number\">29</span>         BZ      r,4B            <span class=\"token operator\">%</span> To P4 if r <span class=\"token operator\">=</span> <span class=\"token number\">0</span> for checking the next n\n<span class=\"token number\">30</span> 7H      CMP     t,q,pk          <span class=\"token operator\">%</span> P7. PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span> large?\n<span class=\"token number\">31</span>         BNP     t,2B            <span class=\"token operator\">%</span> To P4 if q <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span> PRIME<span class=\"token operator\">[</span>k<span class=\"token operator\">]</span>\n<span class=\"token number\">32</span> 8H      INCL    kk,<span class=\"token number\">2</span>            <span class=\"token operator\">%</span> P8. Advance k. k <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token number\">33</span>         JMP     6B              <span class=\"token operator\">%</span> To P6.</code></pre></div>\n<p>21번 줄에서는 n = 3이고, 3이 소수이므로 n을 PRIME[ptop + jj]에 저장한다. 뒤의 31번 줄에서 소수를 찾았을 때 2H로 브랜치하여 n을 저장한다.</p>\n<p>22번 줄에서는 jj를 2만큼 증가시켜 다음 소수가 저장될 위치에 대한 인덱스로 사용할 수 있게 한다.</p>\n<p>23번 줄에서는 jj가 0이되면 500개의 소수가 모두 구해진 것으로 이 경우에는 \"2 Forward\"로 2H 라벨이 붙은 44줄로 이동한다.</p>\n<p>24번 줄에서는 홀수만 검사하기 위해 n을 2씩 증가 시킨다.</p>\n<p>25번 줄에서는 n이 현재까지 찾은 소수로 나눠지는지 검사하기 위해 나눠볼 소수에 대한 인덱스로 kk를 사용한다. k = ptop + kk. n은 홀수이므로 ptop에 있는 2로는 나눠볼 필요가 없기  때문에 kk를 j0로 설정한다.</p>\n<p>26번 줄에서는 메모리에 있는 k번째 소수를 로드한다. pk = M[ptop + kk] 값이 설정된다.</p>\n<p>27번 줄에서 n을 pk로 나눈 몫을 q에 저장한다.</p>\n<p>28번 줄에서는 레지스터 r(g#252)로 rR(remainder register)의 값을 가져온다.</p>\n<p>29번 줄에서는 r이 0인지 여부를 검사하는데, r이 0이라는 것은 n이 소수로 나눠진다는 것을 의미하므로 n은 소수가 아니다. 때문에 다음 소수를 검사하기 위해 \"4 backward\" 하여 24번 줄로 이동한다.</p>\n<p>30번 줄에서는 q와 pk의 값을 비교하는데 만약 q &#x3C;= pk 이면 n은 소수이다. 이에 대한 증명은 연습문제 11번을 참고.</p>\n<p>31번 줄에서는 q&#x3C;= pk인 경우 t &#x3C;= 0이 되므로 n은 소수로 판정되고 n을 저장하기 위해 \"2 backward\"인 21번 줄의 2H 라벨로 이동한다.</p>\n<p>32번 줄에서는 n이 소수인지 아직 알 수 없으므로  다음 소수로 나눠보기 위해서 kk를 2만큼 증가시킨다.</p>\n<p>33번 줄에서는 pk[ptop + kk]로 n을 나눠보기 위해서 \"6 backward\"인 26번 줄의 6H 라벨로 이동한다.</p>\n<h3>테이블 출력</h3>\n<p>결과가 출력되는 형식은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\">First Five Hundred Primes\nFirst Five Hundred Primes\n    <span class=\"token number\">0002</span> <span class=\"token number\">0233</span> <span class=\"token number\">0547</span> <span class=\"token number\">0877</span> <span class=\"token number\">1229</span> <span class=\"token number\">1597</span> <span class=\"token number\">1993</span> <span class=\"token number\">2371</span> <span class=\"token number\">2749</span> <span class=\"token number\">3187</span>\n    <span class=\"token number\">0003</span> <span class=\"token number\">0239</span> <span class=\"token number\">0557</span> <span class=\"token number\">0881</span> <span class=\"token number\">1231</span> <span class=\"token number\">1601</span> <span class=\"token number\">1997</span> <span class=\"token number\">2377</span> <span class=\"token number\">2753</span> <span class=\"token number\">3191</span>\n    <span class=\"token number\">0005</span> <span class=\"token number\">0241</span> <span class=\"token number\">0563</span> <span class=\"token number\">0883</span> <span class=\"token number\">1237</span> <span class=\"token number\">1607</span> <span class=\"token number\">1999</span> <span class=\"token number\">2381</span> <span class=\"token number\">2767</span> <span class=\"token number\">3203</span>\n    ...\n    <span class=\"token number\">0229</span> <span class=\"token number\">0541</span> <span class=\"token number\">0863</span> <span class=\"token number\">1223</span> <span class=\"token number\">1583</span> <span class=\"token number\">1987</span> <span class=\"token number\">2357</span> <span class=\"token number\">2741</span> <span class=\"token number\">3181</span> <span class=\"token number\">3571</span></code></pre></div>\n<h4>Line 34 ~ 37</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">34</span>         GREG    @               <span class=\"token operator\">%</span> Base address\n<span class=\"token number\">35</span> Title   BYTE    <span class=\"token string\">\"First Five Hundred Primes\"</span>\n<span class=\"token number\">36</span> NewLn   BYTE    #a,<span class=\"token number\">0</span>\n<span class=\"token number\">37</span> Blanks  BYTE    <span class=\"token string\">\"   \"</span>,<span class=\"token number\">0</span>         <span class=\"token operator\">%</span> String of three blanks</code></pre></div>\n<p>메모리에 출력에 필요한 문자열들을 위한 메모리를 할당하고 초기화한다.</p>\n<h4>Line 38 ~ 39</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">38</span> 2H      LDA     t,Title         <span class=\"token operator\">%</span> P9. Print Title\n<span class=\"token number\">39</span>         TRAP    <span class=\"token number\">0</span>,Fputs,StdOut</code></pre></div>\n<p>타이틀을 출력한다.</p>\n<h4>Line 40 ~ 61</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">40</span>         NEG     mm,<span class=\"token number\">2</span>            <span class=\"token operator\">%</span> Initialize m.\n<span class=\"token number\">41</span> 3H      ADD     mm,mm,j0        <span class=\"token operator\">%</span> P10. Print line\n<span class=\"token number\">42</span>         LDA     t,Blanks        <span class=\"token operator\">%</span> Output <span class=\"token string\">\"   \"</span>.\n<span class=\"token number\">43</span>         TRAP    <span class=\"token number\">0</span>,Fputs,StdOut\n<span class=\"token number\">44</span> 2H      LDWU    pk,ptop,mm      <span class=\"token operator\">%</span> pk <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> prime to be printed\n<span class=\"token number\">45</span> 0H      GREG    #<span class=\"token number\">2030303030000000</span>       <span class=\"token operator\">%</span> <span class=\"token string\">\" 0000\"</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0</span>,<span class=\"token number\">0</span>\n<span class=\"token number\">46</span>         STOU    <span class=\"token number\">0B</span>,BUF          <span class=\"token operator\">%</span> Prepare buffer for decimal conversion\n<span class=\"token number\">47</span>         LDA     t,BUF<span class=\"token operator\">+</span><span class=\"token number\">4</span>         <span class=\"token operator\">%</span> t <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> position of units digit\n<span class=\"token number\">48</span> 1H      DIV     pk,pk,<span class=\"token number\">10</span>        <span class=\"token operator\">%</span> pk <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> floor(pk<span class=\"token operator\">/</span><span class=\"token number\">10</span>)\n<span class=\"token number\">49</span>         GET     r,rR            <span class=\"token operator\">%</span> r <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> next digit\n<span class=\"token number\">50</span>         INCL    r,<span class=\"token string\">'0'</span>           <span class=\"token operator\">%</span> r <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> ASCII digit r\n<span class=\"token number\">51</span>         STBU    r,t,<span class=\"token number\">0</span>           <span class=\"token operator\">%</span> Store r in the buffer\n<span class=\"token number\">52</span>         SUB     t,t,<span class=\"token number\">1</span>           <span class=\"token operator\">%</span> Move one byte to the left\n<span class=\"token number\">53</span>         PBNZ    pk,<span class=\"token number\">1B</span>           <span class=\"token operator\">%</span> Repeat on remaining digits\n<span class=\"token number\">54</span>         LDA     t,BUF           <span class=\"token operator\">%</span> Output <span class=\"token string\">\" \"</span> and four digits\n<span class=\"token number\">55</span>         TRAP    <span class=\"token number\">0</span>,Fputs,StdOut\n<span class=\"token number\">56</span>         INCL    mm,<span class=\"token number\">2</span><span class=\"token operator\">*</span>L<span class=\"token operator\">/</span><span class=\"token number\">10</span>       <span class=\"token operator\">%</span> Advance by <span class=\"token number\">50</span> wydes\n<span class=\"token number\">57</span>         PBN     mm,2B\n<span class=\"token number\">58</span>         LDA     t,NewLn         <span class=\"token operator\">%</span> Output a newline\n<span class=\"token number\">59</span>         TRAP    <span class=\"token number\">0</span>,Fputs,StdOut\n<span class=\"token number\">60</span>         CMP     t,mm,<span class=\"token number\">2</span><span class=\"token operator\">*</span>(L<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>) <span class=\"token operator\">%</span> P11. <span class=\"token number\">500</span> printed?\n<span class=\"token number\">61</span>         PBNZ    t,3B            <span class=\"token operator\">%</span> To P10 if not done</code></pre></div>\n<p>40번 줄에서는 mm(g#250)을 -2로 설정.</p>\n<p>41번 줄에서는 mm = mm + j0로 설정</p>\n<p>42번 ~ 43번 줄에서는 출력 라인의 첫 시작인 공백문자 3개를 출력한다.</p>\n<p>44번 줄에서는 출력할 소수를 pk로 가져온다. pk는 PRIMES[ptop + mm].</p>\n<p>45번 줄에서는 숫자를 문자열로 변환하기 위한 문자열을 위한 전역 레지스터를 할당한다.</p>\n<p>46번 줄에서는 45번에 선언한 문자열을 BUF에 저장한다.</p>\n<p>47번 줄에서는 t가 BUF + 4의 위치를 가리키도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot; 0000&quot;\n     ^\n     t</code></pre></div>\n<p>48번 줄에서는 pk를 10으로 나눈 몫을 pk에 저장한다.</p>\n<p>49번 줄에서는 pk의 나머지(digit)가 저장된 rR의 값을 r로 가져온다.</p>\n<p>50번 줄에서는 digit를 char로 변환하기 위해 r에 문자 '0'을 더해준다.</p>\n<p>51번 줄에서는 이렇게 변환된 digit을 버퍼에 저장한다.</p>\n<p>52번 줄에서는 t에서 1을 빼서 앞의 자릿수로 이동시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot; 0002&quot;\n    ^\n    t</code></pre></div>\n<p>53번 줄에서는 pk이가 0이 아닌 경우, 출력할 자릿수가 더 남았다는 의미이므로 \"1 backward\"인 48번줄의 1H 라벨로 이동한다.</p>\n<p>54~55번 줄에서는 BUF에 저장된 소수를 출력한다.</p>\n<p>56번 줄에서는 다음에 출력할 소수의 위치를 계산하는데 소수 테이블이 row가 50고, column이 10이라, 현재 숫자에서 다음 50번째 숫자를 출력하기 위해 mm을 2 * L / 10 만큼 증가 시킨다.</p>\n<p>57번 줄에서 mm이 음수면 현재 줄에 출력한 소수가 남았다는 의미로 \"2 backward\"인 44번줄로의 2H 라벨로 이동한다.</p>\n<p>58~59번 줄은 10개의 소수를 다 출력하고 난 후, 개행문자를 출력해준다.</p>\n<p>60번 줄에서는 mm이 마지막 소수를 가리키는 위치인지 검사한다.</p>\n<p>61번 줄에서는 mm과 마지막 소수의 위치가를 비교한 경과가 같지 않은 경우(0이 아닌 경우), \"3 backward\"인 41번 줄의 3H 라벨로 이동한다.</p>\n<p>mm의 값의 변화는 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Line</th>\n<th align=\"right\">c00</th>\n<th align=\"right\">c01</th>\n<th align=\"right\">c02</th>\n<th align=\"right\">c03</th>\n<th align=\"right\">c04</th>\n<th align=\"right\">c05</th>\n<th align=\"right\">c06</th>\n<th align=\"right\">c07</th>\n<th align=\"right\">c08</th>\n<th align=\"right\">c09</th>\n<th align=\"right\">-</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"right\">-1000</td>\n<td align=\"right\">-900</td>\n<td align=\"right\">-800</td>\n<td align=\"right\">-700</td>\n<td align=\"right\">-600</td>\n<td align=\"right\">-500</td>\n<td align=\"right\">-400</td>\n<td align=\"right\">-300</td>\n<td align=\"right\">-200</td>\n<td align=\"right\">-100</td>\n<td align=\"right\">0</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"right\">-998</td>\n<td align=\"right\">-898</td>\n<td align=\"right\">-798</td>\n<td align=\"right\">-698</td>\n<td align=\"right\">-598</td>\n<td align=\"right\">-498</td>\n<td align=\"right\">-398</td>\n<td align=\"right\">-298</td>\n<td align=\"right\">-198</td>\n<td align=\"right\">-98</td>\n<td align=\"right\">2</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"right\">-996</td>\n<td align=\"right\">-896</td>\n<td align=\"right\">-796</td>\n<td align=\"right\">-696</td>\n<td align=\"right\">-596</td>\n<td align=\"right\">-496</td>\n<td align=\"right\">-396</td>\n<td align=\"right\">-296</td>\n<td align=\"right\">-196</td>\n<td align=\"right\">-96</td>\n<td align=\"right\">4</td>\n</tr>\n</tbody>\n</table>\n<h3>프로그램 종료</h3>\n<h4>Line 62</h4>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token number\">62</span>         TRAP    <span class=\"token number\">0</span>,Halt,<span class=\"token number\">0</span></code></pre></div>\n<p>프로그램을 종료한다.</p>","frontmatter":{"title":"500 Primes","date":"2014-03-24 23:50:00+0900","tags":["tuestudy","mmix"]},"timeToRead":11},"nextPost":{"frontmatter":{"title":"Jekyll to DocPad"},"fields":{"slug":"/posts/2017-10-03-jekyll-to-docpad/"}},"previousPost":{"frontmatter":{"title":"MMIX: 명령행 인자 출력하기"},"fields":{"slug":"/posts/2014-02-11-mmix-args/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2014-03-24-commented-500-primes/","nextSlug":"/posts/2017-10-03-jekyll-to-docpad/","previousSlug":"/posts/2014-02-11-mmix-args/"}}}