{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-09-25-Hackathon-for-My-Own-Blog-Work-Log/","webpackCompilationHash":"dca1f6970d308c76eac0","result":{"data":{"currentPost":{"html":"<p>지난번 후기에 이어서 내집마련 해커톤에서 무엇을 했고, 어떤 삽질을 했는지 정리해보겠다.</p>\n<p><a href=\"https://www.notion.so/be735a45ff444a48bd4a23a0a299e2e5\">내집마련 해커톤</a>에 참여하게 되었다. 해커톤에 참여하는 사람들은 내집마련, 내집수리, 해비타트(팀 블로그 만들기), 기타(블로그 관련 개발) 중에서 선택할 수 있는데 내 경우에는 <strong>내집수리</strong>가 목표였다.</p>\n<p>전날까지 잊고 있다가 모임 장소로 가는 지하철 안에서 할 일 목록을 정리했다. 다행히 전에 따로 정리해둔 것이 있어서 그 중에서 시간 안에 할 수 있을만한 것들을 몇 개 골랐다.</p>\n<ul>\n<li>태그 수정</li>\n<li>포스트 많은 순으로 태그 정렬</li>\n<li>포스트에 이전, 다음 링크 달기</li>\n<li>이미지 보드 만들기</li>\n</ul>\n<p>앞선 세 가지 작업은 준비 운동이고, 이미지 보드를 만드는 것이 이번 해커톤의 주된 목표였다. 그리고 숨겨진 목표가 하나 더 있었는데 그것은 바로 GraphQL 데이터에서 페이지를 생성하는 방식에 대해 좀 더 깊게 이해하는 것이었다.</p>\n<p>최근에 포스팅 하고 있는 DocPad to Gatsby 시리즈(?)의 다음 편이 바로 <strong>마크다운에서 포스트 생성하기</strong>인데 튜토리얼에 나온 방법을 그대로 따라 했기 때문에 글로 쓸 수 있을 정도로 머리 속이 정리된 상태가 아니기 때문이다. 그래서 관련된 작업을 하면서 기존에 적당히 읽었던 문서들을 좀 더 꼼꼼히 살펴볼 요량이었다.</p>\n<p>하지만 이미지 보드 근처에는 가보지도 못했는데 그 이유는 <strong>포스트에 이전, 다음 링크 달기</strong>가 의외의 복병이었기 때문이다. Swift 만 줄곧 사용해서 타입 시스템이나 optional의 편리함에 취해 있었는데 GraphQL이 뱉어낸 JavaScript 객체의 null, undefined 처리가 깔끔하게 처리되지 않아서 삽질을 많이 했다.</p>\n<h3>태그 수정</h3>\n<p><code class=\"language-text\">blogging</code>이란 태그를 <code class=\"language-text\">housekeeping</code>으로 변경하는 단순한 문자열 치환 작업이지만 변경할 태그명을 정하는 것은 쉽지 않았다.</p>\n<p>처음 정적 사이트로 블로그를 만들었을 때 블로그 관리와 관련된 포스트에 <code class=\"language-text\">blog gardening</code>이라는 태그를 붙였는데 정원 가꾸는 것에 대한 비유가 적절한가? 하는 생각이 들어서 Gatsby로 포스트를 옮기면서 <code class=\"language-text\">blogging</code>으로 바꿨다. 헌데 <code class=\"language-text\">blogging</code>은 말그대로 블로그를 쓰는 행위이기 때문에 원래 나타내고자 했던 의미가 사라져 버렸다는 것을 뒤늦게 깨달았다.</p>\n<p>사전에서 단어를 열심히 검색하다 문득 이번 해커톤 행사에서 블로그를 집에 비유한 것이 맘에 들어서 <code class=\"language-text\">housekeeping</code>(살림, 집안 돌보는 일)으로 바꿨다.</p>\n<p>자, 이제 살림을 시작해볼까!</p>\n<h3>포스트 많은 순으로 태그 정렬</h3>\n<p>블로그 태그는 <code class=\"language-text\">allMarkdownRemarks</code>에서 <code class=\"language-text\">tags</code>를 추출한 다음 이를 <code class=\"language-text\">group</code>으로 묶어서 고유한 값으로 이루어진 태그 목록을 추출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">useStaticQuery</span><span class=\"token punctuation\">(</span>graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query {\n    allPosts: allMarkdownRemark(limit: 2000) {\n      tagGroup: group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>GraphQL in-browser IDE를 통해 보면 <code class=\"language-text\">allMarkdownRemakrs</code>에 대해서는 <code class=\"language-text\">sort</code>로 정렬 조건을 걸 수 있지만 <code class=\"language-text\">group</code>에 대해서는 <code class=\"language-text\">sort</code>가 지원되지 않는다. 다시 말해 GraphQL 로는 <code class=\"language-text\">totalCount</code>가 많은 순으로 정렬된 태그 목록을 얻을 수 없다는 것이다.</p>\n<p>때문에 Javascript에서 기본으로 제공하는 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code class=\"language-text\">Array.prototype.sort()</code></a>의 힘을 빌릴 수 밖에 없었다.</p>\n<p>이번에도 역시 <code class=\"language-text\">sort()</code> 함수의 인자로 들어가는 <code class=\"language-text\">compareFunction</code>은 그 반환값이 형태가 C의 <a href=\"https://en.cppreference.com/w/c/string/byte/strcmp\"><code class=\"language-text\">strcmp</code></a>와 동일하다는 것을 잊고, boolean을 반환하도록 만들었다가 놀라고 말았다. 더 놀라운 사실은 <code class=\"language-text\">number</code> 배열을 넣고, <code class=\"language-text\">compareFunction</code>을 생략하면 기본 정렬 순서가 문자열의 유니코드 코드 포인트가 적용된다는 점이겠지만.</p>\n<p>이런 함정을 잘 피해서 코드를 작성하면 원하는 결과를 얻을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// sort tags in descending order by totalCount</span>\n<span class=\"token keyword\">const</span> sortedTags <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>allPosts<span class=\"token punctuation\">.</span>tagGroup<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> b<span class=\"token punctuation\">.</span>totalCount <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>totalCount\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 <a href=\"http://localhost:8000/tags/\">Tags</a> 페이지에서 내가 어떤 내용의 글을 가장 많이 썼는지 쉽게 알 수 있게 되었다. 👏</p>","frontmatter":{"title":"내집마련 해커톤 작업노트 1","date":"2019/09/24","tags":["housekeeping","Hackathon"]},"timeToRead":3},"nextPost":null,"previousPost":{"frontmatter":{"title":"내집마련 해커톤 후기"},"fields":{"slug":"/posts/2019-09-22-Hackathon-for-My-Own-Blog/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2019-09-25-Hackathon-for-My-Own-Blog-Work-Log/","nextSlug":"","previousSlug":"/posts/2019-09-22-Hackathon-for-My-Own-Blog/"}}}