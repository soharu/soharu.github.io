{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2014-01-25-first-step/","webpackCompilationHash":"a634b47fc7865b77ff3f","result":{"data":{"currentPost":{"html":"<p>Github Pages + <a href=\"http://jekyllrb.com\">jekyll</a> 조합으로 블로그 만들기 시도.</p>\n<h3>저장소 생성</h3>\n<p>soharu.github.io 로 저장소를 만든 후 clone</p>\n<h3>jekyll 설치</h3>\n<p>처음에는 <a href=\"https://help.github.com/articles/using-jekyll-with-pages\">Using Jekyll with Pages</a> 이 문서를 보고 따라하느라고 Gemfile을 만들었었다.</p>\n<p>위 문서에 나오는대로 하고 <code class=\"language-text\">bundle install</code> 때리면 주구장창 gem install ... 를 만나게 되는데\n하라는대로 하다보면 jekyll도 설치된다. 그냥 다 필요한 거겠거니 하고 깔았다.</p>\n<h3>사이트 생성</h3>\n<p>여기서 가장 많이 헤맸는데 그냥 다 필요없고</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">jekyll new soharu.github.io</code></pre></div>\n<p>하면 site scaffold를 만들어 준다. soharu.github.io는 저장소를 clone한 디렉토리명이다.\n아래와 같은 폴더와 파일들이 생성된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">soharu.github.io/\n├── _config.yml\n├── _layouts\n│   ├── default.html\n│   └── post.html\n├── _posts\n│   └── 2014-01-25-welcome-to-jekyll.markdown\n├── css\n│   ├── main.css\n│   └── syntax.css\n└── index.html</code></pre></div>\n<h3>사이트 테스트</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">jekyll serve</code></pre></div>\n<p>하면 <code class=\"language-text\">http://0.0.0.0:4000</code> 으로 생성된 사이트를 띄워준다.</p>\n<p>근데 위와 같이 서버를 실행하면 변경 사항을 적용할 때 매번</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">jekyll build</code></pre></div>\n<p>를 해줘야 한다. -w(--watch) 옵션을 붙여주자.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">jekyll serve -w</code></pre></div>\n<h3>bootstrap 적용</h3>\n<p>개인적으로 웹 페이지 만들 때 디자인이 구리면 금방 흥미를 잃어버리기 때문에 적은 노력으로 괜찮은 디자인을 얻을\n수 있는 <a href=\"http://getbootstrap.com/\">Bootstrap</a>을 적용하기로 했다.</p>\n<p>일단 source를 통으로 받는다. source로 받으면 안에 예제가 포함되어 있어 참고하기 편하다.</p>\n<p>Bootstarp의 자바스크립트 코드가 <a href=\"http://jquery.com/\">jQuery</a>를 참고하므로 jQuery로 다운받는다.</p>\n<p><a href=\"http://code.jquery.com/jquery-1.11.0.min.js\">Download the compressed, production jQuery 1.11.0</a></p>\n<p>다운 안 받고 CDN 써도 되긴하는데 집 네트워크가 구린 관계로...</p>\n<p>bootstrap-3.0.3/examples/sticky-footer-navbar 를 참고하여, _layout/default.html을\n적당히 수정해주고 나니 지금과 같은 모양새가 갖춰졌다. 이때한 사소한(?) 삽질들은 따로 적지 않겠다.</p>\n<h3>다음에</h3>\n<p>익숙해질 때까지 삽질한 걸 적게 되지 않을까?</p>\n<p>최종 목표는 스터디 사이트를 Github Pages로 갈아 엎는 거. <a href=\"http://import.jekyllrb.com/\">jekyll-import</a>에 wordpress 데이터를\nimport 하는 게 있던데 그걸로 삽질 좀 하지 않을까 싶다.</p>","frontmatter":{"title":"첫삽","date":"2014-01-25 23:47:00+0900","tags":["housekeeping"]},"timeToRead":2},"nextPost":{"frontmatter":{"title":"MMIX: 명령행 인자 출력하기"},"fields":{"slug":"/posts/2014-02-11-mmix-args/"}},"previousPost":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2014-01-25-first-step/","nextSlug":"/posts/2014-02-11-mmix-args/","previousSlug":""}}}