{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-10-12-Create-Pages-from-Markdown-Files/","result":{"data":{"currentPost":{"html":"<p>블로그 포스트 이전을 위해 <a href=\"https://www.gatsbyjs.org/tutorial/\">Gatsby.js Tutorials</a>에서 참고하여 진행했던 작업을 정리해 보았다.</p>\n<h3>플러그인 설치</h3>\n<p>마크다운 파일에서 데이터 소스를 얻고, 이를 html로 변환하기 위해서는 아래 두 플러그인을 설치해야 한다.</p>\n<ul>\n<li><a href=\"https://www.gatsbyjs.org/packages/gatsby-source-filesystem/\">gatsby-source-filesystem</a></li>\n<li><a href=\"https://www.gatsbyjs.org/packages/gatsby-transformer-remark/\">gatsby-transformer-remark</a></li>\n</ul>\n<blockquote>\n<p><strong>Source plugins</strong> bring data <em>into</em> Gatsby’s data system and <strong>transformer plugins</strong> transform raw content brought by source plugins. This pattern can handle all data sourcing and data transformation you might need when building a Gatsby site. - <em>from: <a href=\"https://www.gatsbyjs.org/tutorial/part-six/\">Transformer plugins</a></em></p>\n</blockquote>\n<p>Gatsby에서 사용하는 플러그인은 npm으로 설치하고, <code class=\"language-text\">gatsby-config.js</code> 파일에 추가해주면 된다.</p>\n<div class=\"gatsby-code-title\">gatsby-config.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-source-filesystem</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">src</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/src</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-transformer-remark</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h4>gatsby-source-filesystem</h4>\n<p>이 플러그인은 로컬 파일 시스템의 파일을 <code class=\"language-text\">File</code> 노드로 생성한다.</p>\n<p>이렇게 생성된 노드는 GraphQL을 통해 정보를 얻을 수 있다: <code class=\"language-text\">file</code>, <code class=\"language-text\">allFiles</code></p>\n<h4>gatsby-transformer-remark</h4>\n<p>이 플러그인은 마크다운 파일을 파싱하여 <code class=\"language-text\">MarkdownRemark</code> 노드로 만든다. 마크다운 프로세서로는 <a href=\"https://remark.js.org/\">Remark</a>가 사용된다.</p>\n<p>이렇게 생성된 노드는 GraphQL을 통해 정보를 얻을 수 있다: <code class=\"language-text\">markdownRemark</code>,  <code class=\"language-text\">AllMarkdownRemarks</code></p>\n<h3>페이지 만들기</h3>\n<p>페이지를 만들기 위해서는  <code class=\"language-text\">gatsby-node.js</code>에 필요한 코드를 작성해야 한다.</p>\n<blockquote>\n<p>Code in the file <code class=\"language-text\">gatsby-node.js</code> is run once in the process of building your site. You can use it to create pages dynamically, add nodes in GraphQL, or respond to events during the build lifecycle. To use the  <a href=\"https://www.gatsbyjs.org/docs/node-apis/\">Gatsby Node APIs</a> , create a file named <code class=\"language-text\">gatsby-node.js</code> in the root of your site. Export any of the APIs you wish to use in this file. - <em>from: <a href=\"https://www.gatsbyjs.org/docs/api-files-gatsby-node/\">The gatsby-node.js API file</a></em></p>\n</blockquote>\n<p>필요한 작업은 두 가지인데 1) <strong>포스트 페이지를 위한 경로를 생성</strong>하는 것과, 2. <strong>데이터와 템플릿을 이용해 페이지를 생성</strong>하는 것이다.</p>\n<h4>경로 생성</h4>\n<p><code class=\"language-text\">MarkdownRemark</code> 타입의 노드를 생성할 때, <code class=\"language-text\">slug</code>필드를 추가해준다. <code class=\"language-text\">slug</code>는 페이지를 생성할 경로로 사용된다.</p>\n<div class=\"gatsby-code-title\">gatsby-node.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onCreateNode</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node<span class=\"token punctuation\">,</span> getNode<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createNodeField <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">MarkdownRemark</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Turn markdown files in our `posts` directory into `/post/slug`</span>\n    <span class=\"token keyword\">const</span> relativeFilePath <span class=\"token operator\">=</span> <span class=\"token function\">createFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node<span class=\"token punctuation\">,</span>\n      getNode<span class=\"token punctuation\">,</span>\n      basePath<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">posts</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">createNodeField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      node<span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">slug</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/posts</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>relativeFilePath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>페이지 생성</h4>\n<div class=\"gatsby-code-title\">gatsby-node.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> graphql<span class=\"token punctuation\">,</span> actions <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> actions\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n  result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n      component<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./src/templates/blog-post.js</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        slug<span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">createPage</code>의 <code class=\"language-text\">context</code> 파라미터를 이용하여 템플릿 파일 안에서 사용되는 정보를 전달해줄 수 있다. 여기서는 <code class=\"language-text\">context</code>로 전달된 <code class=\"language-text\">slug</code>가 <code class=\"language-text\">blog-post.js</code>에서 마크다운 데이터를 조회하는데 사용되었다.</p>\n<div class=\"gatsby-code-title\">src/templates/blog-post.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// …</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<h3>마무리</h3>\n<blockquote>\n<p>Gatsby lets you use GraphQL to query your <em>data</em> and <em>map</em> the query results to <em>pages</em>—all at build time. This is a really powerful idea. -- <em>from: <a href=\"https://www.gatsbyjs.org/tutorial/part-seven/\">7. Programmatically create pages from data</a></em></p>\n</blockquote>\n<p>각 과정들을 정리해 보면서 이 말에 전적으로 동의하게 되었다.</p>\n<p>마크다운 파일에서 태그 페이지 생성하는 것도 이와 같은 방식으로 이루어지며, 이 내용은 다음 글에서 다루도록 하겠다.</p>\n<h3>참조</h3>\n<ul>\n<li>\n<p><a href=\"https://www.gatsbyjs.org/tutorial/\">Gatsby.js Tutorials | GatsbyJS</a></p>\n<ul>\n<li><a href=\"https://www.gatsbyjs.org/tutorial/part-five/\">5. Source plugins and rendering queried data</a></li>\n<li><a href=\"https://www.gatsbyjs.org/tutorial/part-six/\">6. Transform plugins</a></li>\n<li><a href=\"https://www.gatsbyjs.org/tutorial/part-seven/\">7. Programmatically create pages from data</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.gatsbyjs.org/docs/gatsby-internals/\">Behind the Scenes with Gatsby Internals | GatsbyJS</a></li>\n<li><a href=\"https://graphql.org/learn/thinking-in-graphs/\">Thinking in Graphs | GraphQL</a></li>\n</ul>","frontmatter":{"title":"마크다운 파일에서 포스트 생성하기","date":"2019-10-12 22:30:00+0900","tags":["housekeeping","GatsbyJS"]},"timeToRead":3},"nextPost":{"frontmatter":{"title":"새해를 기다리기 보다는 지금 당장"},"fields":{"slug":"/posts/2019-12-11-Cannot-Wait-for-New-Year/"}},"previousPost":{"frontmatter":{"title":"글꼴 설정하기"},"fields":{"slug":"/posts/2019-09-29-Typography-in-Gatsby/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/2019-10-12-Create-Pages-from-Markdown-Files/","nextSlug":"/posts/2019-12-11-Cannot-Wait-for-New-Year/","previousSlug":"/posts/2019-09-29-Typography-in-Gatsby/"}}}