{"version":3,"sources":["webpack:///./src/pages/posts.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/site-menu.js","webpack:///./src/components/header.js","webpack:///./src/components/footer.js","webpack:///./src/components/layout.js","webpack:///./src/components/post-list-section.js"],"names":["PostsPage","data","_public_static_d_904090368_json__WEBPACK_IMPORTED_MODULE_9__","years","posts","edges","map","_ref","node","frontmatter","year","uniqueYears","_toConsumableArray","Set","postsInYear","forEach","filter","_ref2","react__WEBPACK_IMPORTED_MODULE_10___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_11__","_components_seo__WEBPACK_IMPORTED_MODULE_12__","title","_components_post_list_section__WEBPACK_IMPORTED_MODULE_13__","key","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","ContentWrapper","styled","div","withConfig","displayName","componentId","List","ul","InlineListItem","li","ListItem","props","react_default","href","to","children","SiteMenu","site_menu_ListItem","HeaderWrapper","header","SiteInfo","SiteTitle","h1","SiteDescription","p","Header","siteTitle","gatsby_browser_entry","site_menu","social","footer","Footer","author","footer_ContentWrapper","Date","getFullYear","Layout","_2457312135","Fragment","layout_ContentWrapper","gatsby__WEBPACK_IMPORTED_MODULE_1__","moment__WEBPACK_IMPORTED_MODULE_2__","moment__WEBPACK_IMPORTED_MODULE_2___default","styled_components__WEBPACK_IMPORTED_MODULE_3__","SectionWrapper","section","SectionTitle","h2","PostListItem","PostDate","PostTitle","PostListSection","count","length","titleWithCount","formattedDate","moment","date","local","format","id","fields","slug"],"mappings":"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","file":"component---src-pages-posts-js-837fc57ec2c78b31ca3d.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostListSection from \"../components/post-list-section\"\n\nconst PostsPage = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      posts: allMarkdownRemark(\n        filter: {frontmatter: {layout: {ne: \"draft\"}}}\n        sort: { order: DESC, fields: frontmatter___date }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date\n              year: date(formatString: \"YYYY\")\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `)\n  const years = data.posts.edges.map(({ node }) => node.frontmatter.year)\n  const uniqueYears = [...new Set(years)]\n  const postsInYear = {}\n  uniqueYears.forEach(year => {\n    postsInYear[year] = data.posts.edges.filter(\n      ({ node }) => node.frontmatter.year === year\n    )\n  })\n\n  return (\n    <Layout>\n      <SEO title=\"Posts\" />\n      {uniqueYears.map(year => (\n        <PostListSection key={year} title={year} posts={postsInYear[year]} />\n      ))}\n    </Layout>\n  )\n}\n\nexport default PostsPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nexport default SEO\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst ContentWrapper = styled.div`\n  width: 100%;\n  background-color: #ffcc06;\n  padding: 0.8rem;\n  text-align: center;\n`\n\nconst List = styled.ul`\n  liststyle: none;\n  margin: 0;\n`\n\nconst InlineListItem = styled.li`\n  font-family: 'Lobster', cursive;\n  font-size: 1.2rem;\n  display: inline-block;\n  margin-bottom: 0;\n  margin-left: 1.2rem;\n  &:first-child {\n    margin-left: 0rem;\n  }\n  & a {\n    color: white;\n  }\n  & a:hover {\n    color: #202c6a;\n  }\n`\n\nconst ListItem = props => (\n  <InlineListItem>\n    <a href={props.to}>{props.children}</a>\n  </InlineListItem>\n)\n\nconst SiteMenu = () => (\n  <ContentWrapper>\n    <List>\n      <ListItem to=\"/\">Home</ListItem>\n      <ListItem to=\"/about/\">About</ListItem>\n      <ListItem to=\"/posts/\">Posts</ListItem>\n      <ListItem to=\"/tags/\">Tags</ListItem>\n    </List>\n  </ContentWrapper>\n)\n\nexport default SiteMenu\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\nimport SiteMenu from \"./site-menu\"\n\nconst HeaderWrapper = styled.header`\n  background-color: #202c6a;\n`\n\nconst SiteInfo = styled.div`\n  margin: 0 auto;\n  max-width: 960px;\n  padding: 2.5rem;\n  text-align: center;\n`\n\nconst SiteTitle = styled.h1`\n  font-family: 'Lobster', cursive;\n  margin: 0 0 0.8rem 0;\n  font-size: 2.5rem;\n  & a {\n    color: white;\n  }\n  & a:hover {\n    color: #ffcc06;\n  }\n`\n\nconst SiteDescription = styled.p`\n  color: #f2f2f2;\n  margin: 0;\n  font-size: 0.9rem;\n`\n\nconst Header = ({ siteTitle, description }) => (\n  <HeaderWrapper>\n    <SiteInfo>\n      <SiteTitle>\n        <Link to=\"/\">{siteTitle}</Link>\n      </SiteTitle>\n      <SiteDescription>{description}</SiteDescription>\n    </SiteInfo>\n    <SiteMenu />\n  </HeaderWrapper>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n  description: PropTypes.string,\n  social: PropTypes.array,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n  description: ``,\n  social: [],\n}\n\nexport default Header\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\n\nconst ContentWrapper = styled.footer`\n  border-top: 1px solid #EFEAF4;\n  padding-top: 0.5rem;\n  padding-bottom: 1rem;\n  text-align: center;\n  font-size: 0.8rem;\n  font-family: 'Noto Sans KR', sans-serif;\n`\n\nconst Footer = ({ author }) => (\n  <ContentWrapper>\n    © 2014-{new Date().getFullYear()} <b>{author}</b>. All rights reserved.\n    Built with\n    {` `}\n    <b>\n      <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n    </b>.\n  </ContentWrapper>\n)\n\nFooter.propTypes = {\n  author: PropTypes.string,\n}\n\nFooter.defaultProps = {\n  author: ``,\n}\n\nexport default Footer\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport PropTypes from \"prop-types\"\nimport Header from \"./header\"\nimport Footer from \"./footer\"\nimport \"./layout.css\"\n\nconst ContentWrapper = styled.div`\n  margin: 0 auto;\n  max-width: 800px;\n  padding: 2rem 1rem;\n\n  & main {\n    min-height: 400;\n  }\n`\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          author\n          title\n          description\n          social {\n            name\n            url\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header\n        siteTitle={data.site.siteMetadata.title}\n        description={data.site.siteMetadata.description}\n        social={data.site.siteMetadata.social}\n      />\n      <ContentWrapper>\n        <main>{children}</main>\n      </ContentWrapper>\n      <Footer author={data.site.siteMetadata.author} />\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport moment from \"moment\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\n\nconst SectionWrapper = styled.section`\n  margin: 0 0 1.5rem 0;\n  padding: 0;\n\n  &:last-child {\n    margin-bottom: 1rem;\n  }\n`\n\nconst SectionTitle = styled.h2`\n  margin: 0;\n  padding: 0 0 1rem 0;\n\n  & span {\n    font-weight: lighter;\n    color: red;\n    font-size: 0.8rem;\n  }\n`\n\nconst PostListItem = styled.div`\n  margin: 0;\n  padding: 0.1rem 0;\n`\n\nconst PostDate = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  padding: 0.1rem 1.5rem;\n  background-color: #ffcc06;\n  border-radius: 0.2rem;\n  color: white;\n  font-family: monospace;\n  font-weight: bold;\n`\n\nconst PostTitle = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  padding: 0 0 0 0.5rem;\n\n  & a {\n    color: black;\n  }\n`\n\nconst PostListSection = ({ title, posts }) => {\n  const count = posts.length\n  const titleWithCount = `${title} / ${count} post${count === 1 ? \"\" : \"s\"}`\n  return (\n    <SectionWrapper>\n      <SectionTitle>{titleWithCount}</SectionTitle>\n      {posts.map(({ node }) => {\n        const formattedDate = moment(node.frontmatter.date)\n          .local()\n          .format(`MM/DD`)\n        return (\n          <PostListItem key={node.id}>\n            <PostDate>{formattedDate}</PostDate>\n            <PostTitle>\n              <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n            </PostTitle>\n          </PostListItem>\n        )\n      })}\n    </SectionWrapper>\n  )\n}\n\nPostListSection.propTypes = {\n  title: PropTypes.string,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        frontmatter: PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          date: PropTypes.string.isRequired,\n        }),\n        fields: PropTypes.shape({\n          slug: PropTypes.string.isRequired,\n        }),\n      }),\n    }).isRequired\n  ),\n}\n\nPostListSection.defaultProps = {\n  title: ``,\n  posts: [],\n}\n\nexport default PostListSection\n"],"sourceRoot":""}