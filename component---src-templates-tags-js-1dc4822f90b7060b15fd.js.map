{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/post-list-section.js"],"names":["SectionFooter","styled","div","Tags","pageContext","data","tag","edges","allMarkdownRemark","title","posts","to","pageQuery","SectionWrapper","section","SectionTitle","h2","PostListItem","PostDate","PostTitle","PostListSection","count","length","titleWithCount","map","node","formattedDate","moment","frontmatter","date","local","format","key","id","fields","slug","defaultProps"],"mappings":"2FAAA,0HAQMA,EARN,UAQsBC,EAAOC,IAAV,0EAAGD,CAAH,oFAkDJE,UAxCF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IACAC,EAAUF,EAAKG,kBAAfD,MACFE,EAAK,gBAAmBH,EAAnB,IAEX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKG,MAAOA,IACZ,kBAAC,IAAD,CAAiBA,MAAOA,EAAOC,MAAOH,IACtC,kBAACP,EAAD,KACE,kBAAC,OAAD,CAAMW,GAAG,SAAT,oBAgCD,IAAMC,EAAS,c,kCC5DtB,sEAMMC,EAAiBZ,IAAOa,QAAV,wFAAGb,CAAH,qEASdc,EAAed,IAAOe,GAAV,sFAAGf,CAAH,yFAWZgB,EAAehB,IAAOC,IAAV,sFAAGD,CAAH,gCAKZiB,EAAWjB,IAAOC,IAAV,kFAAGD,CAAH,iLAYRkB,EAAYlB,IAAOC,IAAV,mFAAGD,CAAH,gGAWTmB,EAAkB,SAAC,GAAsB,IAApBX,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC1BW,EAAQX,EAAMY,OACdC,EAAoBd,EAAN,MAAiBY,EAAjB,SAAwC,IAAVA,EAAc,GAAK,KACrE,OACE,kBAACR,EAAD,KACE,kBAACE,EAAD,KAAeQ,GACdb,EAAMc,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNC,EAAgBC,IAAOF,EAAKG,YAAYC,MAC3CC,QACAC,OAFmB,SAGtB,OACE,kBAACd,EAAD,CAAce,IAAKP,EAAKQ,IACtB,kBAACf,EAAD,KAAWQ,GACX,kBAACP,EAAD,KACE,kBAAC,OAAD,CAAMR,GAAIc,EAAKS,OAAOC,MAAOV,EAAKG,YAAYnB,cA2B5DW,EAAgBgB,aAAe,CAC7B3B,MAAM,GACNC,MAAO,IAGMU","file":"component---src-templates-tags-js-1dc4822f90b7060b15fd.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostListSection from \"../components/post-list-section\"\nimport styled from \"styled-components\"\n\nconst SectionFooter = styled.div`\n  margin: 0;\n  padding: 0;\n  font-size: 0.8rem;\n  & a {\n    color: #000;\n    text-decoration: underline;\n  }\n`\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges } = data.allMarkdownRemark\n  const title = `Tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <PostListSection title={title} posts={edges} />\n      <SectionFooter>\n        <Link to=\"/tags\">Show All Tags</Link>\n      </SectionFooter>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n              date: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport moment from \"moment\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\n\nconst SectionWrapper = styled.section`\n  margin: 0 0 1.5rem 0;\n  padding: 0;\n\n  &:last-child {\n    margin-bottom: 1rem;\n  }\n`\n\nconst SectionTitle = styled.h2`\n  margin: 0;\n  padding: 0 0 1rem 0;\n\n  & span {\n    font-weight: lighter;\n    color: red;\n    font-size: 0.8rem;\n  }\n`\n\nconst PostListItem = styled.div`\n  margin: 0;\n  padding: 0.1rem 0;\n`\n\nconst PostDate = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  padding: 0.1rem 1.5rem;\n  background-color: #ffcc06;\n  border-radius: 0.2rem;\n  color: white;\n  font-family: monospace;\n  font-weight: bold;\n`\n\nconst PostTitle = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n  margin: 0;\n  padding: 0 0 0 0.5rem;\n\n  & a {\n    color: black;\n  }\n`\n\nconst PostListSection = ({ title, posts }) => {\n  const count = posts.length\n  const titleWithCount = `${title} / ${count} post${count === 1 ? \"\" : \"s\"}`\n  return (\n    <SectionWrapper>\n      <SectionTitle>{titleWithCount}</SectionTitle>\n      {posts.map(({ node }) => {\n        const formattedDate = moment(node.frontmatter.date)\n          .local()\n          .format(`MM/DD`)\n        return (\n          <PostListItem key={node.id}>\n            <PostDate>{formattedDate}</PostDate>\n            <PostTitle>\n              <Link to={node.fields.slug}>{node.frontmatter.title}</Link>\n            </PostTitle>\n          </PostListItem>\n        )\n      })}\n    </SectionWrapper>\n  )\n}\n\nPostListSection.propTypes = {\n  title: PropTypes.string,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        frontmatter: PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          date: PropTypes.string.isRequired,\n        }),\n        fields: PropTypes.shape({\n          slug: PropTypes.string.isRequired,\n        }),\n      }),\n    }).isRequired\n  ),\n}\n\nPostListSection.defaultProps = {\n  title: ``,\n  posts: [],\n}\n\nexport default PostListSection\n"],"sourceRoot":""}